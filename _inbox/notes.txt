# Author: Adam L. Rich
# Date:   Various
# Description:
#
#   LoadToEnvironment(RData, env)
#     Takes a path to an RData file
#     Loads the contents of that file to an environment
#     Or to a throw away environment, if none is given
#
#     It's key contribution is to allow 'load()' to assign the loaded data to an object of our naming
#     and not auto-pollute the working environment
#
#     Will load the data frame my.data stored in 'my.RData' to the object new.name:
#       new.name <- LoadToEnvironment('my.RData')$my.data
#
#     Does the same, but also keeps everything else in a new environment:
#       e <- new.env()
#       new.name <- LoadToEnvironment('my.RData', e)$my.data
#       e$my.data == new.name
#
#
#   EnvironmentName(env)
#     the function base::environmentName() does not give the name of environments that are "nameless"
#     Eventhough these environments print a unique signature
#     This function assigns this unique signature as the 'name'
#
#     Example:
#       e <- new.env()
#       base::environmentName(e)    # [1] ""
#       EnvironmentName(e)          # [1] "<environment: 0x02761520>"
#
#   HFactory
#     This returns a function that allows one to search the header of a dataframe
#     If the data frame is df, HFactory returns the following:
#       function(pattern){
#         names(df)[grep(pattern, names(df), ignore.case = TRUE)]
#       }
#
#     So, on can do the following:
#       h <- HFactory('my.data.frame')
#       h('date')
#     To return all the columns in my.data.frame that include the string date, ignoring case
#
#   Quarter
#     Returns the quarter name YYYYqQ for a date
#
#   NormalizePath
#     An enhancement to base::normalizePath that guarantees that the last character of a directory is not '/'
#
#   ArgNames (example only)
#     Returns a vector of the names of the objects passed to it
#     Possibly the only way to get the name of the objects that were passed
#     Could potentialy allow for "ByRef" style processing
#     Inspired by guts of rm function
#



# Example only
# If you want to use this in a function, you have to copy the relevant parts to the function body
# ArgNames <- function(...){
#   dots <- match.call(expand.dots = FALSE)$...
#   names <- sapply(dots, as.character)
#   if (length(names) == 0L) {
#     names <- character(0L)
#   }
#   names
# }

# # Creates a data frame with a header only
# # Currently only works if header has more than one element
# #   See https://stat.ethz.ch/pipermail/r-help/2008-August/169968.html
# empty.data.frame <- function(header){
#   v <- rep(1, length(header))
#   m <- matrix(v, nrow = 1)
#   df <- data.frame(m)
#   names(df) <- header
#   df[NULL,]
# }
#


# [April 9, 2013 ALR]
# Makes ifelse smarter
# No more mixing of integers and characters

# A couple functions for help with Functional programming
#   Inspired by package:roxygen via
#   http://stackoverflow.com/questions/2228544/

